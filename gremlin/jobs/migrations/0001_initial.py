# Generated by Django 3.1.1 on 2021-04-11 19:30

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import gremlin.jobs.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Contract', max_length=512, verbose_name='Document Name')),
                ('pageCount', models.IntegerField(default=1, verbose_name='Number of Pages')),
                ('rawText', models.TextField(default='', verbose_name='Raw Text')),
                ('type', models.CharField(default='', max_length=5, verbose_name='File Extension')),
                ('file', models.FileField(upload_to='data/uploads/docs/', verbose_name='Original File')),
                ('extracted', models.BooleanField(default=False, verbose_name='Extracted Successfully')),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('TEST', 'Test'), ('PRODUCTION', 'Production')], default='PRODUCTION', max_length=128)),
                ('name', models.CharField(default='Job Name', max_length=512)),
                ('created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Job Creation Date and Time')),
                ('modified', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('queued', models.BooleanField(default=False, verbose_name='Job Queued')),
                ('started', models.BooleanField(default=False, verbose_name='Job Started')),
                ('error', models.BooleanField(default=False, verbose_name='Job in Error Status')),
                ('finished', models.BooleanField(default=False, verbose_name='Job Finished')),
                ('status', models.TextField(default='Not Started', verbose_name='Job Status')),
                ('completed_tasks', models.IntegerField(default=0, verbose_name='Completed Step Tasks')),
                ('start_time', models.DateTimeField(blank=True, null=True, verbose_name='Step Start Date and Time')),
                ('stop_time', models.DateTimeField(blank=True, null=True, verbose_name='Step Stop Date and Time')),
                ('callback', models.TextField(blank=True, default='', verbose_name='Callback URL')),
                ('notification_email', models.CharField(blank=True, default='', max_length=512)),
                ('job_inputs', models.TextField(blank=True, default='', verbose_name='Input Json')),
                ('file', models.FileField(blank=True, null=True, upload_to='data/jobs_data/results/', verbose_name='Output File Zip')),
                ('owner', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Pipeline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Line Name', max_length=512, verbose_name='Pipeline Name')),
                ('description', models.TextField(blank=True, default='', verbose_name='Pipeline Description')),
                ('production', models.BooleanField(blank=True, default=False, verbose_name='Available in Production')),
                ('locked', models.BooleanField(blank=True, default=False, verbose_name='Object locked (backend performing updates)...')),
                ('install_error', models.BooleanField(blank=True, default=False, verbose_name='Installation Error')),
                ('install_error_code', models.TextField(blank=True, default='', verbose_name='Installation Error Description')),
                ('imported', models.BooleanField(default=False, verbose_name='Created from import')),
                ('input_json_schema', gremlin.jobs.models.GremlinJSONField(default=gremlin.jobs.models.blank_json)),
                ('total_steps', models.IntegerField(default=0, verbose_name='Step Count')),
                ('schema', models.TextField(blank=True, default='', verbose_name='Pipeline Schema')),
                ('json_schema', gremlin.jobs.models.GremlinJSONField(default=gremlin.jobs.models.blank_json)),
                ('supported_files', models.TextField(blank=True, default='', verbose_name='Supported File Types')),
                ('scale', models.FloatField(default=1.0, verbose_name='View Scale Factor')),
                ('x_offset', models.IntegerField(default=0, verbose_name='X Offset')),
                ('y_offset', models.IntegerField(default=0, verbose_name='Y Offset')),
                ('owner', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PipelineNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('THROUGH_SCRIPT', 'Python Script'), ('ROOT_NODE', 'Root node - provides data, doc and setting.'), ('USER_INPUT_NODE', 'USer input node - provides a json schema to request data from user.'), ('PACKAGING_NODE', 'Packaging node - instructions to package results.'), ('CALLBACK', 'Callback - send data or docs out to external API'), ('API_REQUEST', 'API Request - request data or docs from an external API')], default='THROUGH_SCRIPT', max_length=128)),
                ('name', models.CharField(default='Step Name', max_length=512)),
                ('locked', models.BooleanField(blank=True, default=False, verbose_name='Object locked (backend performing updates)...')),
                ('input_transform', models.TextField(blank=True, default='', verbose_name='Input Transformation')),
                ('step_settings', models.TextField(blank=True, default='', verbose_name='Step Settings')),
                ('x_coord', models.FloatField(default=0, verbose_name='X Coordinate')),
                ('y_coord', models.FloatField(default=0, verbose_name='Y Coordinate')),
                ('step_number', models.IntegerField(default=-1)),
                ('owner', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('parent_pipeline', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='nodes', to='jobs.pipeline')),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Result', max_length=512, verbose_name='Result Name')),
                ('type', models.CharField(choices=[('DOC', 'Doc Result'), ('STEP', 'Step Result'), ('JOB', 'Job Result')], default='JOB', max_length=128)),
                ('start_time', models.DateTimeField(blank=True, null=True, verbose_name='Step Start Date and Time')),
                ('stop_time', models.DateTimeField(blank=True, null=True, verbose_name='Step Stop Date and Time')),
                ('started', models.BooleanField(default=False, verbose_name='Step started')),
                ('error', models.BooleanField(default=False, verbose_name='Step in Error Status')),
                ('finished', models.BooleanField(default=False, verbose_name='Step Finished')),
                ('transformed_input_data', models.TextField(blank=True, default='{}', verbose_name='Transformed Input Json Data')),
                ('input_settings', models.TextField(blank=True, default='{}', verbose_name='Input Settings')),
                ('raw_input_data', models.TextField(blank=True, default='{}', verbose_name='Raw Input Json Data')),
                ('job_inputs', gremlin.jobs.models.GremlinJSONField(default=gremlin.jobs.models.blank_json)),
                ('node_inputs', gremlin.jobs.models.GremlinJSONField(default=gremlin.jobs.models.blank_json)),
                ('file', models.FileField(blank=True, null=True, upload_to='data/results/', verbose_name='Results File')),
                ('output_data', models.TextField(default='{}', verbose_name='Result Data')),
                ('start_state', gremlin.jobs.models.GremlinJSONField(default=gremlin.jobs.models.blank_state)),
                ('end_state', gremlin.jobs.models.GremlinJSONField(default=gremlin.jobs.models.blank_state)),
                ('node_output_data', gremlin.jobs.models.GremlinJSONField(default=gremlin.jobs.models.blank_json)),
                ('doc', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='jobs.document')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='jobs.job')),
                ('owner', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('pipeline_node', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='jobs.pipelinenode')),
            ],
        ),
        migrations.CreateModel(
            name='ScriptDataFile',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('data_file', models.FileField(blank=True, null=True, upload_to='data/data_files/', verbose_name='Script Data File')),
                ('manifest', models.TextField(blank=True, default='', verbose_name='File contents')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Job Creation Date and Time')),
                ('modified', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='UserNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('NOTIFICATION', 'Notice from system.'), ('SCRIPT_EXPORT', 'Export script to zip file.'), ('SCRIPT_IMPORT', 'Import script from zip file.'), ('PIPELINE_EXPORT', 'Export pipeline to zip file.'), ('PIPELINE_IMPORT', 'Import pipeline from zip file.')], default='NOTIFICATION', max_length=128)),
                ('message', models.TextField(default='', verbose_name='Message')),
                ('data_file', models.FileField(blank=True, null=True, upload_to='data/data_files/', verbose_name='Notification Data')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Job Creation Date and Time')),
                ('modified', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('owner', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TaskLogEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logger_name', models.CharField(max_length=100)),
                ('level', models.PositiveSmallIntegerField(choices=[(0, 'NotSet'), (20, 'Info'), (30, 'Warning'), (10, 'Debug'), (40, 'Error'), (50, 'Fatal')], db_index=True, default=40)),
                ('msg', models.TextField(blank=True, default='')),
                ('trace', models.TextField(blank=True, default='')),
                ('create_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='jobs.result')),
            ],
            options={
                'verbose_name': 'Task Log Entries',
                'verbose_name_plural': 'Task Log Entries',
                'ordering': ('-create_datetime',),
            },
        ),
        migrations.CreateModel(
            name='PythonScript',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=256, verbose_name='Lookup Name')),
                ('human_name', models.CharField(default='', max_length=32, verbose_name='Human Readable Name')),
                ('type', models.CharField(choices=[('RUN_ON_JOB', 'Run on Job Data (For monolith scripts)'), ('RUN_ON_JOB_DOCS_PARALLEL', 'Run on Each Doc in Job (Parallel Execution)'), ('RUN_ON_PAGE', 'Run on Each Page of Doc (Sharded Execution)')], default='RUN_ON_JOB', max_length=128)),
                ('install_error', models.BooleanField(blank=True, default=False, verbose_name='Installation Error')),
                ('install_error_code', models.TextField(default='', verbose_name='Installation Error Description')),
                ('description', models.TextField(blank=True, default='', verbose_name='Script Description')),
                ('supported_file_types', models.TextField(default='[".pdf"]', verbose_name='Supported File Types')),
                ('script', models.TextField(blank=True, default='', verbose_name='Python Code')),
                ('required_packages', models.TextField(blank=True, default='', verbose_name='Required Python Packages')),
                ('package_needs_install', models.BooleanField(blank=True, default=False, verbose_name='Package Install Needed')),
                ('setup_script', models.TextField(blank=True, default='', verbose_name='Python setup script')),
                ('script_needs_install', models.BooleanField(blank=True, default=False, verbose_name='Script Install Needed')),
                ('env_variables', models.TextField(blank=True, default='', verbose_name='Environment Variables')),
                ('env_variables_need_install', models.BooleanField(blank=True, default=False, verbose_name='Env Variables Install Needed')),
                ('schema', models.TextField(blank=True, default='', verbose_name='Input Schema')),
                ('json_schema', gremlin.jobs.models.GremlinJSONField(default=gremlin.jobs.models.blank_json)),
                ('mode', models.CharField(choices=[('TEST', 'Test Mode'), ('DEPLOYED', 'Ready for Deployment')], default='TEST', max_length=128)),
                ('locked', models.BooleanField(blank=True, default=False, verbose_name='Locked by backend.')),
                ('installer_log', models.TextField(blank=True, default='', verbose_name='Installation Log')),
                ('setup_log', models.TextField(blank=True, default='', verbose_name='Setup Log')),
                ('data_file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='jobs.scriptdatafile')),
                ('owner', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='pipelinenode',
            name='script',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='jobs.pythonscript'),
        ),
        migrations.AddField(
            model_name='pipeline',
            name='root_node',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='jobs.pipelinenode'),
        ),
        migrations.CreateModel(
            name='JobLogEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logger_name', models.CharField(max_length=100)),
                ('level', models.PositiveSmallIntegerField(choices=[(0, 'NotSet'), (20, 'Info'), (30, 'Warning'), (10, 'Debug'), (40, 'Error'), (50, 'Fatal')], db_index=True, default=40)),
                ('msg', models.TextField()),
                ('trace', models.TextField(blank=True, null=True)),
                ('create_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='jobs.job')),
            ],
            options={
                'verbose_name': 'Job Log Entries',
                'verbose_name_plural': 'Job Log Entries',
                'ordering': ('-create_datetime',),
            },
        ),
        migrations.AddField(
            model_name='job',
            name='pipeline',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='jobs.pipeline'),
        ),
        migrations.CreateModel(
            name='Edge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.TextField(blank=True, default='', verbose_name='Link Label')),
                ('transform_script', models.TextField(blank=True, default='', verbose_name='Data Transform Script')),
                ('locked', models.BooleanField(blank=True, default=False, verbose_name='Object locked (backend performing updates)...')),
                ('end_node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='in_edges', to='jobs.pipelinenode')),
                ('owner', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('parent_pipeline', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='edges', to='jobs.pipeline')),
                ('start_node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='out_edges', to='jobs.pipelinenode')),
            ],
        ),
        migrations.AddField(
            model_name='document',
            name='job',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='jobs.job'),
        ),
        migrations.AddField(
            model_name='document',
            name='owner',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
